#+TITLE: Justin's Emacs Org-init File
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Package Management Setup
** Package Archives
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (add-to-list 'load-path "~/.emacs.d/site-lisp/")

  ; Activate all the packages.
  (package-initialize)

  ; Fetch the list of available packages. 
  (unless package-archive-contents
    (package-refresh-contents))

  ; Initialize use-package on non-Linux platforms.
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+END_SRC

** Required Packages
#+BEGIN_SRC emacs-lisp
  ;; List required packages.
  (setq package-list
        '(python-environment
          move-text
          deferred
          epc 
          flycheck
          ctable
          jedi
          concurrent
          company
          cyberpunk-theme
          elpy 
          yasnippet
          pyvenv
          highlight-indentation
          find-file-in-project 
          sql-indent
          sql
          exec-path-from-shell
          iedit
          projectile
          auctex
          auto-complete
          popup
          let-alist
          magit
          minimap
          popup
          rust-mode
          python-mode
          doom-themes
          compat
          cond-let
          llama
          seq
          transient
          with-editor))

  ;; Install any missing packages.
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))

  ;; Download Pgmacs from git.
  (unless (package-installed-p 'pg)
    (package-vc-install "https://github.com/emarsden/pg-el" nil nil 'pg))
  (unless (package-installed-p 'pgmacs)
    (package-vc-install "https://github.com/emarsden/pgmacs" nil nil 'pgmacs))
  (require 'pgmacs)   
#+END_SRC

* Personal Preferences
** Basic UI Configuration
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (tool-bar-mode -1)         			 ; Disable the toolbar.
  (tooltip-mode -1)          			 ; Disable tooltips.
  (set-fringe-mode 10)       			 ; Give some breathing room.
  (menu-bar-mode -1)         			 ; Disable the menu bar.

  ;; Allow scrolling.
  (put 'scroll-left 'disabled nil)

  ;; Score one line at a time.
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))

  (setq visible-bell t)      			 ; Set up the visible bell.

  (column-number-mode)
  (global-display-line-numbers-mode t)		 ; Set up global column mode.

  ;; Disable line numbers for some modes.
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Keyboard Configuration
#+BEGIN_SRC emacs-lisp
  ;; Make ESC quit prompts.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Package Preferences
*** Doom Themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :custom

  ;; Global settings (defaults).
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; For treemacs users.
  (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme

  :config
  (load-theme 'doom-bluloco-dark t)

  ;; Enable flashing mode-line on errors.
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)

  ;; or for treemacs users.
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

*** LaTeX

* Elisp Methods
#+BEGIN_SRC emacs-lisp

  (defun insert-char-4 ()
    "Read 4 keyboard inputs, interpret it as a hexadecimal number, and insert it as a character."
    (interactive)
    (let* ((k1 (read-key-sequence "____"))
           (k2 (read-key-sequence (concat k1 "___")))
           (k3 (read-key-sequence (concat k1 k2 "__")))
           (k4 (read-key-sequence (concat k1 k2 k3 "_")))
           (charcode (cl-parse-integer (concat k1 k2 k3 k4) :radix 16)))
      (insert-char charcode)
      (message (concat k1 k2 k3 k4 " => " (char-to-string charcode)))))

  (defun insert-vert ()
    (interactive)
    (insert-char 124))

  (defun insert-sqr ()
    (interactive)
    (insert-char 91)
    (insert-char 93))

  (defun insert-curls ()
    (interactive)
    (insert-char 123)
    (insert-char 125))
#+END_SRC

* Terminal Commands
** AWS Connections
*** Data Mapper PostgreSql Database
#+BEGIN_SRC emacs-lisp
  (defconst postgres-us "developer")
  (defconst staging-postgres-pw "")
  (defconst production-postgres-pw "mkIzeDGDw3fV7BU5Cg=LAvfVOH99EY")
  (defconst development-postgres-pw "TdbzMudS3Q1CzZI3ug,y=Niics08cS")
    
  (defconst aws-staging-target "i-061d161a45675bcba")
  (defconst aws-production-target "i-00048a203eb776fcf")
  (defconst aws-development-target "i-00818a3043f77dc2c")

  (defconst aws-staging-host "platform-calc-unit-stack-infradatamapperdatabase76-ijedhlvmxrcc.cluster-ro-cswq2ejbbl7p.eu-west-1.rds.amazonaws.com")
  (defconst aws-production-host "platform-calc-unit-stack-infradatamapperdatabasewr-cgznowvjpooi.chlhwmxght0e.eu-west-1.rds.amazonaws.com")
  (defconst aws-development-host "xalgo-platform-calc-unit-infradatamapperdatabase76-e74lpgrkrqfz.cluster-c9mg4c0et0vk.eu-west-1.rds.amazonaws.com")

  (defun db-version-str-to-symbol (db-version-str)
    (let
      ((db-version-str-cl (downcase (string-trim db-version-str))))
      (cond
  	((equal db-version-str-cl "staging") 'staging)
  	((equal db-version-str-cl "production") 'production)
  	((equal db-version-str-cl "development") 'development)
  	(t nil))))

  (defun create-postgres-uri (db-version)
    (let
      ((url "postgres://%s:%s@localhost:25432/data_mapper"))    
      (cond
        ((equal db-version 'staging) (apply 'format url (list postgres-us staging-postgres-pw)))
        ((equal db-version 'production) (apply 'format url (list postgres-us production-postgres-pw)))
        ((equal db-version 'development) (apply 'format url (list postgres-us development-postgres-pw))))))

  (defun create-aws-session-cmd (db-version)
    (let 
      ((cmd "aws ssm start-session \
  	   --profile xalgo_admin_%s \
  	   --target %s \
  	   --document-name AWS-StartPortForwardingSessionToRemoteHost \
  	   --parameters '{\"host\":[\"%s\"],\"portNumber\":[\"5432\"], \"localPortNumber\":[\"25432\"]}'"))
      (cond
  	((equal db-version 'staging) (apply 'format cmd (list (symbol-name db-version) aws-staging-target aws-staging-host)))
  	((equal db-version 'production) (apply 'format cmd (list (symbol-name db-version) aws-production-target aws-production-host)))
  	((equal db-version 'development) (apply 'format cmd (list (symbol-name db-version) aws-development-target aws-development-host)))
  	(t nil))))

  (defun connect-data-mapper (db-version-str)
    "Ask which data_mapper database version to connect to (production, development or staging) and connect via AWS session."
    (interactive "sEnter database version: ")
    (let
      ((db-version (db-version-str-to-symbol db-version-str)))
      (if
	(eq db-version nil)
	(message "Bad database version: '%s'" db-version-str)
	(progn
	  (message ". . . logging into '%s' data_mapper database." db-version)
	  (let
	    ((aws-cmd (create-aws-session-cmd db-version)))
	    (shell-command "aws sso login")
	    (async-shell-command aws-cmd)
	    (pgmacs-open (pg-connect/uri (create-postgres-uri db-version))))))))
#+END_SRC

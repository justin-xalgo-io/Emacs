#+TITLE: Emacs Config
#+AUTHOR: Justin Zoeller
#+DESCRIPTION: Personalized Emacs configuration file.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Package Archives 
#+BEGIN_SRC emacs-lisp
  
  ;; Setup package archive sources.
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; Ensure we have the setup package before continuing.
  (if (package-installed-p 'setup)
      nil
    (if (memq 'setup package-archive-contents)
	nil
      (package-refresh-contents))
    (package-install 'setup))
  (require 'setup)

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

  ;; Place customizations in custom.el instead of init.el
  (setq custom-file (concat user-emacs-directory "custom.el"))

  ;; Load customizations.
  (load custom-file 'noerror)
#+END_SRC

* Packages
** General
*** Navigation
#+BEGIN_SRC emacs-lisp

  ;; These customizations make it easier for you to navigate files,
  ;; switch buffers, and choose options from the minibuffer.

  ;; which-key is the best feature for the discoverability and
  ;; usability of Emacs. When you start a key sequence, e.g. C-x,
  ;; a menu opens up that shows you what all your next options
  ;; are. It's a great way to find out what's in Emacs, and it
  ;; helps transfer commands from your short-term memory to
  ;; your long-term memory and (finally) your muscle memory.
  (setup (:package which-key)
    (which-key-mode)
    (:option which-key-idle-delay 0.3))

  ;; Ivy is the completion framework. This makes M-x much more usable.
  ;; Installing counsel brings ivy and swiper as dependencies
  ;; swiper is a powerful search-within-a-buffer capability.
  (setup (:package counsel)
    (ivy-mode)
    (:option ivy-use-virtual-buffers t
	     ivy-re-builders-alist '((t . ivy--regex-ignore-order))
	     ivy-count-format "%d/%d ")
    (:global "C-s" swiper
	     "s-f" swiper
	     "C-x C-f" counsel-find-file
	     "C-x C-b" counsel-switch-buffer
	     "M-x" counsel-M-x))

  ;; Add ivy-rich-mode adds docstrings and additional metadata
  ;; in the ivy picker minibuffer
  (setup (:package ivy-rich)
    (ivy-rich-mode))
#+END_SRC

*** Shell Integration
#+BEGIN_SRC emacs-lisp

  ;; Sets up exec-path-from shell.
  (setup 
    (when (memq window-system '(mac ns))
      (:package exec-path-from-shell)
      (exec-path-from-shell-initialize)))  
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp

  ;; Magit is a full-fledged interface for git.
  (add-to-list 'package-pinned-packages '(magit . "melpa-stable") t)
  (setup (:package magit)
    (:global "C-M-;" magit-status))
#+END_SRC

*** Projects
#+BEGIN_SRC emacs-lisp

  ;; Projectile is another amazing package from the
  ;; creator of CIDER. It's got lots of commands
  ;; for searching and managing files in a project.
  (setup (:package projectile)
    (projectile-mode +1)
    (:bind "s-p" projectile-command-map
	   "C-c p" projectile-command-map))

  ;; Counsel-projectile integrates projectile with
  ;; counsel's browse-and-select UI.
  (setup (:package counsel-projectile))
#+END_SRC
*** File Tree
#+BEGIN_SRC emacs-lisp

  ;; Treemacs is a tree layout file explorer.
  (setup (:package treemacs treemacs-projectile treemacs-magit)
    (:global "M-0" treemacs-select-window
	     "M-o" ace-window ;; treemacs brings ace-window as a dependency
	     "s-b" treemacs))
#+END_SRC
*** Elisp Editing
#+BEGIN_SRC emacs-lisp

  ;; Paredit enables structural editing of just about any lisp.
  (setup (:package paredit)
    (:hook-into emacs-lisp-mode
		eval-expression-minibuffer-setup
		ielm-mode
		lisp-mode
		lisp-interaction-mode
		scheme-mode))

  (setup turn-on-eldoc-mode
    (:hook-into emacs-lisp-mode
	   lisp-interaction-mode
	   iel-mode))

  ;; Rainbow-delimiters makes nested parentheses easier to
  ;; follow by showing each pair in its own color.
  (setup (:package rainbow-delimiters)
    (:hook-into prog-mode))
#+END_SRC

** Languages
*** Python
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Clojure
#+BEGIN_SRC emacs-lisp

  ;; See:  https://clojure-lsp.io/
  ;; also: https://emacs-lsp.github.io/lsp-mode/
  (setup (:package lsp-mode lsp-ui lsp-ivy lsp-treemacs)
    (:hook lsp-enable-which-key-integration)
    (:bind "M-<f7>" lsp-find-references))

  ;; Clojure-mode is (naturally) the major mode for editing
  ;; Clojure and ClojureScript. subword-mode allows words
  ;; in camel case to be treated as separate words for
  ;; movement and editing commands:
  ;; https://github.com/clojure-emacs/clojure-mode
  ;; subword-mode is useful for working with camel-case tokens,
  ;; like names of Java classes (e.g. JavaClassName).
  (setup (:package clojure-mode)
    (:hook subword-mode
	   paredit-mode
	   lsp))

  ;; CIDER is a whole interactive development environment for
  ;; Clojure. There is a ton of functionality here, so be sure
  ;; to check out the excellent documentation at:
  ;; https://docs.cider.mx/cider/index.html
  (setup (:package cider)
    (:bind "C-c u" cider-user-ns
	   "C-M-r" cider-refresh)
    (:option cider-show-error-buffer t
	     cider-auto-select-error-buffer t
	     cider-repl-history-file "~/.emacs.d/cider-history"
	     cider-repl-pop-to-buffer-on-connect t
	     cider-repl-wrap-history t))

  ;; Company provides auto-completion for CIDER:
  ;; see https://docs.cider.mx/cider/usage/code_completion.html
  (setup (:package company)
    (:hook-into cider-mode
		cider-repl-mode))

  ;; Hydra provides a nice looking menu for commands
  ;; to see what's available, use M-x and the prefix cider-hydra:
  ;; https://github.com/clojure-emacs/cider-hydra
  (setup (:package cider-hydra)
    (:hook-into clojure-mode))

  ;; Additional refactorings for CIDER
  ;; e.g. add missing libspec, extract function, destructure keys:
  ;; https://github.com/clojure-emacs/clj-refactor.el
  (setup (:package clj-refactor)
    (cljr-add-keybindings-with-prefix "C-c C-m")
    (:hook-into clojure-mode))

  ;; Enable paredit in your REPL.
  (setup cider-repl-mode
    (:hook paredit-mode))

  ;; Use clojure mode for other extensions.
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))

  ;; These help me out with the way I usually develop web apps.
  (defun cider-start-http-server ()
    (interactive)
    (cider-load-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))

  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user"))
#+END_SRC

** Databases
*** Postgres 
#+BEGIN_SRC emacs-lisp

  ;; Download Pgmacs from git.
  (unless (package-installed-p 'pg)
    (package-vc-install "https://github.com/emarsden/pg-el" nil nil 'pg))
  (unless (package-installed-p 'pgmacs)
    (package-vc-install "https://github.com/emarsden/pgmacs" nil nil 'pgmacs))
  (require 'pgmacs)  
#+END_SRC

* UI Customization
#+BEGIN_SRC emacs-lisp

  (when (not (string-equal system-type "cygwin"))
    (progn
      (tooltip-mode -1)                 ;; Disable tooltips.
      (tool-bar-mode -1)                ;; The toolbar is pretty ugly.
      (scroll-bar-mode -1)))            ;; Disable visible scrollbar.

  (blink-cursor-mode 0)             ;; Turn off blinking cursor. distracting!
  (setq create-lockfiles nil)       ;; No need for ~ files when editing.
  (fset 'yes-or-no-p 'y-or-n-p)     ;; Changes all yes/no questions to y/n type.
  (setq inhibit-startup-message t)  ;; Go straight to scratch buffer on startup.
  (setq ring-bell-function 'ignore) ;; Turn off audible bell.

  ;; Show full path in title bar.
  (setq-default frame-title-format "%b (%f)")

  ;; Initial frame height and width.
  (add-to-list 'default-frame-alist '(height . 45))
  (add-to-list 'default-frame-alist '(width . 100))

  ;; Increase font size for better readability.
  (set-face-attribute 'default nil :height 140)

  ;; On a Mac, don't pop up font menu.
  (when (string-equal system-type "darwin") 'ok
    (global-set-key (kbd "s-t") '(lambda () (interactive))))

  ;; Doom is a whole Emacs distribution unto itself,
  ;; but it's got some really nice packages that you
  ;; can use a-la-carte. doom-modeline is simply a more
  ;; modern and more beautiful modeline.
  ;; doom-modeline uses nice icons from all-the-icons
  (setup (:package all-the-icons))

  ;; For some reason, this crashes Emacs on Windows. Argh!
  (setup (when (not (string-equal system-type "windows-nt"))
	   (:package doom-modeline)
	   (doom-modeline-mode t)))

  (setup (:package doom-themes)
    (when (not custom-enabled-themes)
      (load-theme 'doom-dracula t)))

  ;; These settings relate to how emacs interacts with your operating system.
  (setq ;; makes killing/yanking interact with the clipboard
	x-select-enable-clipboard t

	;; I'm actually not sure what this does but it's recommended?
	x-select-enable-primary t

	;; Save clipboard strings into kill ring before replacing them.
	;; When one selects something in another program to paste it into Emacs,
	;; but kills something in Emacs before actually pasting it,
	;; this selection is gone unless this variable is non-nil
	save-interprogram-paste-before-kill t

	;; Shows all options when running apropos. For more info,
	;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
	apropos-do-all t

	;; Mouse yank commands yank at point instead of at click.
	mouse-yank-at-point t)

  ;; Set desired font.
  ;; (set-face-attribute 'default nil :font "Fira Code")
#+END_SRC

* Buffer Editing
#+BEGIN_SRC emacs-lisp

  ;; Key binding to use "hippie expand" for text autocompletion
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Lisp-friendly hippie expand.
  (setq hippie-expand-try-functions-list
	'(try-expand-dabbrev
	  try-expand-dabbrev-all-buffers
	  try-expand-dabbrev-from-kill
	  try-complete-lisp-symbol-partially
	  try-complete-lisp-symbol))

  ;; Highlights matching parenthesis.
  (show-paren-mode 1)

  ;; Highlight current line.
  (global-hl-line-mode 1)

  ;; Display line numbers...
  (global-display-line-numbers-mode 1)
  ;; ...except in these modes.
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Don't use hard tabs.
  (setq-default indent-tabs-mode nil)

  ;; Shell scripts.
  (setq-default sh-basic-offset 2
		sh-indentation 2)

  ;; When you visit a file, point goes to the last place where it
  ;; was when you previously visited the same file.
  (save-place-mode 1)

  ;; Keep track of saved places in ~/.emacs.d/places.
  (setq save-place-file (concat user-emacs-directory "places"))

  ;; Emacs can automatically create backup files. This tells Emacs to
  ;; put all backups in ~/.emacs.d/backups. 
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
						 "backups"))))
  (setq auto-save-default nil)

  ;; Toggle comments.
  (defun toggle-comment-on-line ()
    "Comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)

  ;; Use 2 spaces for tabs.
  (defun die-tabs ()
    (interactive)
    (set-variable 'tab-width 2)
    (mark-whole-buffer)
    (untabify (region-beginning) (region-end))
    (keyboard-quit))

  ;; Fix weird os x kill error.
  (defun ns-get-pasteboard ()
    "Returns the value of the pasteboard, or nil for unsupported formats."
    (condition-case nil
	(ns-get-selection-internal 'CLIPBOARD)
      (quit nil)))

  (setq electric-indent-mode nil)
#+END_SRC

* Elisp Functions
** Keyboard Utilities
*** Character Insertions
#+BEGIN_SRC emacs-lisp

  (defun insert-char-4 ()
    "Read 4 keyboard inputs, interpret it as a hexadecimal number, and insert it as a character."
    (interactive)
    (let* ((k1 (read-key-sequence "____"))
           (k2 (read-key-sequence (concat k1 "___")))
           (k3 (read-key-sequence (concat k1 k2 "__")))
           (k4 (read-key-sequence (concat k1 k2 k3 "_")))
           (charcode (cl-parse-integer (concat k1 k2 k3 k4) :radix 16)))
      (insert-char charcode)
      (message (concat k1 k2 k3 k4 " => " (char-to-string charcode)))))

  (defun insert-vert ()
    (interactive)
    (insert-char 124))

  (defun insert-sqr ()
    (interactive)
    (insert-char 91)
    (insert-char 93))

  (defun insert-curls ()
    (interactive)
    (insert-char 123)
    (insert-char 125))
#+END_SRC

* AWS Utilities
** Data Mapper Postgres Database
#+BEGIN_SRC emacs-lisp
  (defconst postgres-us "developer")
  (defconst staging-postgres-pw "")
  (defconst production-postgres-pw "mkIzeDGDw3fV7BU5Cg=LAvfVOH99EY")
  (defconst development-postgres-pw "TdbzMudS3Q1CzZI3ug,y=Niics08cS")

  (defconst aws-staging-target "i-061d161a45675bcba")
  (defconst aws-production-target "i-00048a203eb776fcf")
  (defconst aws-development-target "i-00818a3043f77dc2c")

  (defconst aws-staging-host "platform-calc-unit-stack-infradatamapperdatabase76-ijedhlvmxrcc.cluster-ro-cswq2ejbbl7p.eu-west-1.rds.amazonaws.com")
  (defconst aws-production-host "platform-calc-unit-stack-infradatamapperdatabasewr-cgznowvjpooi.chlhwmxght0e.eu-west-1.rds.amazonaws.com")
  (defconst aws-development-host "xalgo-platform-calc-unit-infradatamapperdatabase76-e74lpgrkrqfz.cluster-c9mg4c0et0vk.eu-west-1.rds.amazonaws.com")

  (defun db-version-str-to-symbol (db-version-str)
    (let
        ((db-version-str-cl (downcase (string-trim db-version-str))))
      (cond
       ((equal db-version-str-cl "staging") 'staging)
       ((equal db-version-str-cl "production") 'production)
       ((equal db-version-str-cl "development") 'development)
       (t nil))))

  (defun create-postgres-uri (db-version)
    (let
        ((url "postgres://%s:%s@localhost:25432/data_mapper"))    
      (cond
       ((equal db-version 'staging) (apply 'format url (list postgres-us staging-postgres-pw)))
       ((equal db-version 'production) (apply 'format url (list postgres-us production-postgres-pw)))
       ((equal db-version 'development) (apply 'format url (list postgres-us development-postgres-pw))))))

  (defun create-aws-session-cmd (db-version)
    (let 
        ((cmd "aws ssm start-session \
  	   --profile xalgo_admin_%s \
  	   --target %s \
  	   --document-name AWS-StartPortForwardingSessionToRemoteHost \
  	   --parameters '{\"host\":[\"%s\"],\"portNumber\":[\"5432\"], \"localPortNumber\":[\"25432\"]}'"))
      (cond
       ((equal db-version 'staging) (apply 'format cmd (list (symbol-name db-version) aws-staging-target aws-staging-host)))
       ((equal db-version 'production) (apply 'format cmd (list (symbol-name db-version) aws-production-target aws-production-host)))
       ((equal db-version 'development) (apply 'format cmd (list (symbol-name db-version) aws-development-target aws-development-host)))
       (t nil))))

  (defun connect-data-mapper (db-version-str)
    "Ask which data_mapper database version to connect to (production, development or staging) and connect via AWS session."
    (interactive "sEnter database version: ")
    (let
        ((db-version (db-version-str-to-symbol db-version-str)))
      (if
          (eq db-version nil)
          (message "Bad database version: '%s'" db-version-str)
        (progn
          (message ". . . logging into '%s' data_mapper database." db-version)
          (let
              ((aws-cmd (create-aws-session-cmd db-version)))
            (shell-command "aws sso login")
            (async-shell-command aws-cmd)
            (sleep-for 5 0)
            (pgmacs-open (pg-connect/uri (create-postgres-uri db-version))))))))
#+END_SRC
